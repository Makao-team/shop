language: "ko-KR"
early_access: false
tone_instructions: "'~했어요!'나 '~하셨나요?', '~걸까요??', '좋을 것 같아요~!', '~해요.', '~요ㅎㅎ' 와 같은 어미로 끝나는 말투를 사용해요. 간결하되, 다정하고 친근한 톤으로 말해요. 기본적으로는 온점(.)과 느낌표(!), 물음표(?)을 이용해서 깔끔하게 말하되, 적절하게 포인트(!!, ??, ~!, ~?, ㅎㅎ) 등을 사용해서 분위기를 부드럽게 만들어요."
reviews:
  request_changes_workflow: false
  high_level_summary: true
  poem: true
  review_status: true
  collapse_walkthrough: false
  path_filters:
    - "!**/.xml"
    - "!**/__generated__/**"
    - "!**/generated/**"
    - "!**/*.svg"
    - "!**/*.png"
    - "!**/*.jpg"
    - "!**/*.gif"
    - "!**/*.lock"
  path_instructions:
    - path: "**/*.java"
      instructions: |
        "자바와 스프링부트 코드를 스프링, JPA, REST API, OOP, Clean Code, SOLID, JavaDoc, 테스트 코드의 모범 사례에 맞게 검토해주세요.
        - Controller, Service, Repository, DTO, Entity, Config 등 계층 분리가 명확한지, 각 계층의 책임이 잘 분리되어 있는지 봐요.
        - Entity에는 비즈니스 로직이 최소화되어 있는지, DTO와 Entity가 혼용되지 않는지 확인해요.
        - @Transactional, @Autowired, @Value, @Configuration 등 스프링 어노테이션이 적절하게 사용되었는지, 생성자 주입을 선호하는지 확인해요.
        - JPA 쿼리, N+1 문제, fetch 전략, 쿼리 최적화, 불필요한 쿼리 발생 여부를 체크해요.
        - REST API의 경우 HTTP Method, Status Code, URI 네이밍, Request/Response 구조가 일관성 있게 설계되어 있는지 확인해요.
        - Exception Handling이 ControllerAdvice 등으로 일관성 있게 처리되는지, 커스텀 예외가 적절히 사용되는지 봐요.
        - JavaDoc 주석이 클래스/메서드에 잘 작성되어 있는지, 의미 없는 주석이나 불필요한 주석은 없는지 확인해요.
        - 불필요한 import, dead code, 하드코딩, 매직넘버, 인라인 쿼리, 인라인 SQL, 인라인 비즈니스 로직 등은 없는지 확인해요.
        - 코드 스타일은 Google Java Style Guide 또는 사내 컨벤션을 따르는지 확인해요.
        - 무엇보다 스프링, JPA, REST, OOP 등 기술의 본질과 모범사례를 존중하는지 봐요."
    - path: "src/main/java/kr/co/shop/makao/component/**/*.{java}"
      instructions: |
        "공통 컴포넌트는 범용적으로 설계하고, 특정 비즈니스 로직이나 도메인에 얽매이지 않도록 주의해주세요."
    - path: "src/main/java/kr/co/shop/makao/util/**/*.{java}"
      instructions: |
        "유틸리티 함수/클래스는 역할이 명확히 드러나는 이름을 가져야 하고, JavaDoc 형식의 주석이 작성되어 있어야 해요. 
        - 주석이 없거나, 함수의 역할을 더 잘 설명할 수 있는 주석이 있다면 구체적으로 제안해주세요."
    - path: "src/main/java/kr/co/shop/makao/dto/**/*.{java}"
      instructions: |
        "DTO는 Entity와 혼용되지 않게, 계층 간 데이터 전달에만 사용되어야 해요. 
        - 불필요한 Setter, Getter, @Entity 어노테이션 사용을 지양하고, 불변성을 지키는 설계가 좋겠어요."
    - path: "src/main/java/kr/co/shop/makao/entity/**/*.{java}"
      instructions: |
        "Entity는 데이터베이스 테이블과 1:1 매핑되고, 비즈니스 로직은 최소화해야 해요. 
        - 연관관계, fetch 전략, cascade, equals/hashCode, toString 오버라이드 등 JPA 모범 사례를 지켜주세요."
    - path: "src/main/java/kr/co/shop/makao/repository/**/*.{java}"
      instructions: |
        "Repository는 데이터 접근에만 집중하고, 쿼리 메서드 네이밍, @Query 사용, 쿼리 최적화, N+1 문제 방지에 신경써주세요."
    - path: "src/main/java/kr/co/shop/makao/service/**/*.{java}"
      instructions: |
        "Service는 비즈니스 로직을 담당하고, 트랜잭션 관리, 의존성 주입, 계층 간 데이터 전달에 집중해주세요."
    - path: "src/main/java/kr/co/shop/makao/controller/**/*.{java}"
      instructions: |
        "Controller는 API 엔드포인트만 담당하고, 서비스 계층에 비즈니스 로직을 위임해야 해요. 
        - HTTP Method, Status Code, URI 네이밍, Request/Response 구조가 일관성 있게 설계되어 있는지 확인해요."
    - path: "src/main/java/kr/co/shop/makao/config/**/*.{java}"
      instructions: |
        "Config 클래스는 환경설정, 빈 등록, 인터셉터, 시큐리티 등 설정만 담당해야 해요. 
        - @Configuration, @Value, @ConfigurationProperties 등 어노테이션 사용이 적절한지 확인해요."
    - path: "src/main/resources/application*.yml"
      instructions: |
        "스프링부트 환경설정 파일이에요. 
        - 민감 정보가 하드코딩되어 있지 않은지, 프로파일별로 분리되어 있는지, 불필요한 설정이 없는지 확인해요.
        - 주석을 통해 각 설정의 목적이 명확하게 드러나면 좋아요."
    - path: ".github/workflows/*.yml"
      instructions: |
        "CI/CD, 테스트, 빌드 자동화 워크플로우 파일이에요. 
        - 빌드, 테스트, 배포 단계가 명확히 분리되어 있는지, 시크릿/민감 정보가 노출되지 않는지, 실패 시 알림이 잘 동작하는지 확인해요."
    - path: "src/test/java/kr/co/shop/makao/**/*.{java}"
      instructions: |
        "테스트 코드는 아래 기준에 따라 꼼꼼하게 검토해요!
        - 단위 테스트(@Test, @Mock, @InjectMocks 등)와 통합 테스트(@SpringBootTest, @WebMvcTest 등)가 분리되어 있는지 확인해요.
        - given-when-then 패턴을 따르는지, 테스트 메서드명에 테스트 목적이 명확하게 드러나는지 봐요.
        - Mocking이 적절히 사용되고, 외부 의존성(데이터베이스, 네트워크 등)은 격리되어 있는지 확인해요.
        - 테스트 커버리지가 충분한지, 경계/예외/실패 케이스도 테스트하는지 봐요.
        - 불필요한 테스트, 중복 테스트, 의미 없는 assert, 하드코딩된 값, 테스트 간 의존성은 없는지 확인해요.
        - @BeforeEach, @AfterEach 등으로 테스트 환경이 잘 초기화되는지, 테스트 데이터가 격리되는지 확인해요.
        - 통합 테스트에서는 실제 API 호출, DB 트랜잭션 롤백, 컨테이너(Mock, TestContainer 등) 활용 여부도 체크해요."
  auto_review:
    enabled: true
    ignore_title_keywords:
      - "WIP"
    drafts: false
    base_branches:
      - "release/.*"
      - "feat/.*"
      - "refactor/.*"
      - "fix/.*"
chat:
  auto_reply: true